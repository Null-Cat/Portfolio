<!DOCTYPE html>
<html>

<head>
    <%- include('../partials/_headerMeta.ejs') %>
        <meta name="description"
            content="Project: Corrupted Memory, A 3rd year University Solo Project, testing my technical knowledge in Networking, focusing on Webservers, Websockets, RPCs, Custom Lobby Systems and Dedicated UE5 Servers.">
        <title>Project: Corrupted Memory</title>
        <link rel="stylesheet" href="/css/index.css">
</head>

<body>
    <%- include('../partials/_navBar.ejs') %>

        <div class="container">
            <h1 class="text-center">Corrupted Memory</h1>
            <div id="FeaturedProject" class="carousel slide" data-bs-ride="carousel">
                <!-- Indicators/dots -->
                <div class="carousel-indicators">
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="0"
                        class="active"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="1"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="2"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="3"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="4"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="5"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="6"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="7"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="8"></button>
                    <button type="button" data-bs-target="#FeaturedProject" data-bs-slide-to="9"></button>
                </div>

                <!-- The slideshow/carousel -->
                <div class="carousel-inner">
                    <div class="carousel-item active">
                        <img src="/corruptedmemory/ScreenShot15.png" alt="Screen1" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Checkout</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot5.png" alt="Screen2" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Aisle</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot6.png" alt="Screen3" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Aisle</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot7.png" alt="Screen4" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Entrance Teleporters</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot8.png" alt="Screen5" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Exit Teleporters</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot0.png" alt="Screen5" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Login</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot1.png" alt="Screen6" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Welcome</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot2.png" alt="Screen7" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Create Lobby</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot3.png" alt="Screen8" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Lobbies Browser</h5>
                        </div>
                    </div>
                    <div class="carousel-item">
                        <img src="/corruptedmemory/ScreenShot4.png" alt="Screen9" class="w-100">
                        <div class="carousel-caption d-none d-md-block">
                            <h5>Lobby</h5>
                        </div>
                    </div>
                </div>
                <!-- Left and right controls/icons -->
                <button class="carousel-control-prev" type="button" data-bs-target="#FeaturedProject"
                    data-bs-slide="prev">
                    <span class="carousel-control-prev-icon"></span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#FeaturedProject"
                    data-bs-slide="next">
                    <span class="carousel-control-next-icon"></span>
                </button>
            </div>

            <div class="row" style="padding-top: 25px;">
                <div class="col-sm-12 col-md-6">
                    <h3>Project Description</h3>
                    <p>Corrupted Memory, you are a security specialist sent to investigate a futuristic supermarket
                        that has been taken over by a rogue AI. You must fight off the AI by scanning corrupted
                        merchandise stopping the AI from spreading to the rest of the world.
                        <br>
                        <br>
                        This project was created as part of a 3rd year university project. The project was created
                        using Unreal Engine 5.1, C++, Nodejs and JavaScript. The project was created in solo testing my
                        ability to create
                        scalable backend systems including a custom lobby system using Expressjs and Websockets.
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <h3>Project Features</h3>
                    <div style="padding-bottom: 15px;">
                        <span class="badge bg-secondary">Unreal Engine 5.1</span>
                        <span class="badge bg-primary">C++</span>
                        <span class="badge text-bg-dark">Windows Client</span>
                        <span class="badge text-bg-dark">Linux Server</span>
                    </div>
                    <ul>
                        <li>3D</li>
                        <li>Multiplayer</li>
                        <li>Custom Lobby System</li>
                        <li>RPCs</li>
                        <li>Dedicated UE5 Server</li>
                        <li>Websockets</li>
                        <li>Webservers</li>
                        <li>SQL Database</li>
                        <li>JWT Authentication</li>
                        <li>Password Hashing via Bcrypt</li>
                    </ul>
                </div>
            </div>

            <h3 class="text-center" style="padding-top: 25px;">My Contributions</h3>

            <h4 class="text-center" style="padding-top: 25px;">Lobby System</h4>
            <div class="row" style="padding-top: 10px;">
                <div class="col-sm-12 col-md-6">
                    <p>
                        The Lobby System was created using Nodejs, Expressjs, Websockets and SQL. It was designed
                        to be scalable and able to be used in any dedicated server based UE5 project. The system was
                        designed to be able to handle multiple lobbies at once and to be able to handle up to 4 players
                        in each game. Using Websockets the lobby system is able to display real time information to
                        the players in the lobby such as the current players in the lobby and their ready state.
                        <br>
                        <br>
                        The Client communicates with the server via basic web requests and websockets. Web API requests
                        are
                        used to handle the creation of lobbies, joining of lobbies, leaving of lobbies, and logging in
                        actions that don't particularly need to be real time. Websockets are used to handle the real
                        time
                        actions such as the updating of the lobby information and the ready state of the players in the
                        lobby.

                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="d-flex flex-column">
                        <img src="/corruptedmemory/ScreenShot9.png" alt="Lobby Snippet" class="w-100">
                        <img src="/corruptedmemory/ScreenShot12.png" alt="Lobby Snippet" class="w-100"
                            style="padding-top: 5px;">
                    </div>
                </div>
            </div>

            <h4 class="text-center" style="padding-top: 25px;">Authentication and Security</h4>
            <div class="row" style="padding-top: 10px;">
                <div class="col-sm-12 col-md-6">
                    <p>
                        The quest system was also designed to be designer friendly first. The system conforms
                        to this by allowing the designer to create quests very quickly and easily through blueprints.
                        The Quest class contained 3 main variables Goals, PreConditions and Rewards. Goals are what the
                        player
                        is aiming for to complete the quest this can include quest flags, items, or even a combination
                        of both.
                        PreConditions are what the player needs to have done before they can start the quest, this can
                        also include
                        flags, items, or even a combination of both. Rewards are what the player gets for completing the
                        quest, this
                        can, you guessed it, include items, flags, or even a combination of both.
                        All a designer has to do is create a new blueprint that inherits from the Quest class and
                        then add or replace the values contained in the blueprint that are used to build the quest. This
                        makes the system modular and able to be applied to any quest or situation.
                        <br>
                        <br>
                        To check if a quest is complete the system checks the goals and preconditions of the quest when
                        a new flag has been added or modified also the system also checks if a quests goals have been
                        met
                        when a new item has been added or modified. This is done by declaring events and calling the
                        CheckConditions function on each active quest.
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="d-flex flex-column">
                        <img src="/azureabyss/QuestSnippet0.png" alt="Quest Snippet" class="w-100">
                        <img src="/azureabyss/QuestSnippet1.png" alt="Quest Snippet" class="w-100"
                            style="padding-top: 5px;">
                    </div>
                </div>
            </div>

            <h4 class="text-center" style="padding-top: 25px;">Status & Combat System</h4>
            <div class="d-flex justify-content-center flex-column" style="padding-top: 10px;">
                <img src="/azureabyss/CombatSnippet0.png" alt="Combat Snippet" class="w-100">
                <p style="padding-top: 10px;">
                    The turn-based combination combat system and status system go hand in hand. The status system
                    allows for the player to be affected by different status effects that can be applied by the player
                    or the enemies
                    in and out of combat. There was two different types of status effects that could be inflicted on the
                    player, one which was turn-based and one that was using real time to tick down. The turn-based
                    status effects could only be triggered during combat as they were based on the player's turn, while
                    the
                    real time status effects could be triggered at any time via the consumable jellies in the game. This
                    affected combat
                    as these status effects applied buffs and debuffs to the player and enemies, which could be used
                    tactically by the player
                    to optimise damage output or to survive longer in combat. Status effects include heal over time,
                    thorns which damaged the enemy when they attacked the player, and a strength buff which increased
                    the player's damage output.
                </p>
            </div>
        </div>
        <%- include('../partials/_bootstrapJS.ejs') %>
</body>

<%- include('../partials/_footer.ejs') %>