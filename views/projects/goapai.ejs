<!DOCTYPE html>
<html>

<head>
    <%- include('../partials/_headerMeta.ejs') %>
        <meta name="description"
            content='Project: GOAP AI, A Turn-Based Combat AI implementing Goal-Oriented Action Planning intended for the project Azure Abyss'>
        <title>Project: GOAP AI</title>
        <link rel="stylesheet" href="/css/index.css">
</head>

<body>
    <%- include('../partials/_navBar.ejs') %>

        <div class="container">
            <h1 class="text-center">Goal-Oriented Action Planning (GOAP) AI</h1>

            <div>
                <img src="/goapai/artifact.png" alt="GOAP AI" class="w-100">
            </div>

            <div class="row" style="padding-top: 25px;">
                <div class="col-sm-12 col-md-6">
                    <h3>Project Description</h3>
                    <p>A University Solo Project for the specialization module "Artificial Intelligence". The project
                        solved my research inquiry "Using Goal-Oriented Action Planning Within the Context of Turn-Based
                        Combat".
                        <br>
                        <br>
                        The computing artefact developed to test is a combat artificial intelligence attached
                        to an enemy non-player character for a small turn-based strategy game
                        with a focus on resource management and combo building. In this game, you
                        have a limited set of randomised resources that can be used to build combos to
                        attack an opponent. Combos vary in resource costs and which resource is required
                        for it to be cast you may also use more or fewer resources at random when
                        casting a combo creating an uncertain and dynamic environment that the artificial
                        intelligence must overcome. Additionally, the player is able to steal 1 unit of the
                        most abundant resource the opponent has but is only able to do this once. To
                        win you must defeat the opponent by reducing their health to 0. The combat artificial
                        intelligence must be able to find the optimal set of combos with the current
                        resources that it has on hand and perform those actions to defeat its opponent
                        whilst keeping itself alive.
                        <br>
                        <br>
                        This project that was intended to be used in the project "Azure Abyss" as a Turn-Based
                        Combat AI. The AI was intended to be used by the enemies in the game to generate a plan to
                        defeat
                        the player however due to time constraints I was unable to integrate it into the project.
                        <br>
                        <a href="https://gitea.philipwhite.dev/Null_Cat/GOAP-AI-Unreal"><svg
                                xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24">
                                <path fill="currentColor"
                                    d="M4.209 4.603c-.247 0-.525.02-.84.088c-.333.07-1.28.283-2.054 1.027C-.403 7.25.035 9.685.089 10.052c.065.446.263 1.687 1.21 2.768c1.749 2.141 5.513 2.092 5.513 2.092s.462 1.103 1.168 2.119c.955 1.263 1.936 2.248 2.89 2.367c2.406 0 7.212-.004 7.212-.004s.458.004 1.08-.394c.535-.324 1.013-.893 1.013-.893s.492-.527 1.18-1.73c.21-.37.385-.729.538-1.068c0 0 2.107-4.471 2.107-8.823c-.042-1.318-.367-1.55-.443-1.627c-.156-.156-.366-.153-.366-.153s-4.475.252-6.792.306c-.508.011-1.012.023-1.512.027v4.474l-.634-.301c0-1.39-.004-4.17-.004-4.17c-1.107.016-3.405-.084-3.405-.084s-5.399-.27-5.987-.324c-.187-.011-.401-.032-.648-.032zm.354 1.832h.111s.271 2.269.6 3.597C5.549 11.147 6.22 13 6.22 13s-.996-.119-1.641-.348c-.99-.324-1.409-.714-1.409-.714s-.73-.511-1.096-1.52C1.444 8.73 2.021 7.7 2.021 7.7s.32-.859 1.47-1.145c.395-.106.863-.12 1.072-.12m8.33 2.554c.26.003.509.127.509.127l.868.422l-.529 1.075a.686.686 0 0 0-.614.359a.685.685 0 0 0 .072.756l-.939 1.924a.69.69 0 0 0-.66.527a.687.687 0 0 0 .347.763a.686.686 0 0 0 .867-.206a.688.688 0 0 0-.069-.882l.916-1.874a.667.667 0 0 0 .237-.02a.657.657 0 0 0 .271-.137a8.826 8.826 0 0 1 1.016.512a.761.761 0 0 1 .286.282c.073.21-.073.569-.073.569c-.087.29-.702 1.55-.702 1.55a.692.692 0 0 0-.676.477a.681.681 0 1 0 1.157-.252c.073-.141.141-.282.214-.431c.19-.397.515-1.16.515-1.16c.035-.066.218-.394.103-.814c-.095-.435-.48-.638-.48-.638c-.467-.301-1.116-.58-1.116-.58s0-.156-.042-.27a.688.688 0 0 0-.148-.241l.516-1.062l2.89 1.401s.48.218.583.619c.073.282-.019.534-.069.657c-.24.587-2.1 4.317-2.1 4.317s-.232.554-.748.588a1.065 1.065 0 0 1-.393-.045l-.202-.08l-4.31-2.1s-.417-.218-.49-.596c-.083-.31.104-.691.104-.691l2.073-4.272s.183-.37.466-.497a.855.855 0 0 1 .35-.077" />
                            </svg> Git Repository</a>
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <h3>Project Features</h3>
                    <div style="padding-bottom: 15px;">
                        <span class="badge bg-secondary">Unreal Engine 5.1</span>
                        <span class="badge bg-primary">C++</span>
                        <span class="badge text-bg-dark">Windows</span>
                    </div>
                    <ul>
                        <li>Turn-Based Combat AI</li>
                        <li>Goal Oriented Action Planning</li>
                        <li>Self-Healing Plan</li>
                        <li>Generates Optimised Plan</li>
                    </ul>
                </div>
            </div>

            <h3 class="text-center" style="padding-top: 25px;">My Contributions</h3>

            <h4 class="text-center" style="padding-top: 25px;">GOAP</h4>
            <div class="row" style="padding-top: 10px;">
                <div class="col-sm-12 col-md-6">
                    <p>
                        The implementation of the Goal-Oriented Action Planning algorithm is based on the implementation
                        by Whyte <a href="https://github.com/shaunwhyte">GitHub</a> in the game engine Unity with some
                        modifications,
                        additions and optimisations to suit the needs of the game engine Unreal, in which the artefact
                        was developed in, and constraints when building the tree of possible actions to reach
                        the agent's goal. The Goal-Oriented Action Planning algorithm and agent are implemented
                        as an actor component that can be attached to any actor, pawn or character game object
                        that requires the ability to make decisions when in turn-based combat, providing developers
                        with the flexibility to apply the artificial intelligence using Goal-Oriented Action Planning
                        anywhere as needed. The Goal-Oriented Action Planning algorithm also implements self-recovery
                        re-planning if the first action plan will fail to reach the goal if the environment state
                        does not match the predicted environment state the action plan has accounted for.
                        <br>
                        <br>
                        How the action plan is built in this implementation of Goal-Oriented Action Planning is that
                        the algorithm uses a recursive function to build a tree of action nodes that contain an action,
                        the current state of the environment, the parent action node and the total running cost at
                        that point in the tree to generate possible actions to reach the agent's goal. The algorithm
                        creates a list of leaves that contain the final action to an environment state in which the
                        agent has successfully reached its goal. The algorithm then selects the leaf with the lowest
                        cost and then works its way back up the tree to the root node to generate the final action
                        plan. This is then executed by the agent to reach its goal.
                        <br>
                        <br>
                        One of the critical optimisations of the Goal-Oriented Action Planning that was developed
                        when the algorithm builds the tree is that it sorts the actions based on their weighted costs.
                        This allows the artificial intelligence agents to be able to make complex decisions based on
                        the hierarchy of actions to fulfil the agent's goals. The algorithm considers the current state
                        of the game and the actions available to the agent before deciding on the most efficient
                        course of action. As a result, the agent will always select the action that will get it closer
                        to
                        accomplishing its goals.
                        <br>
                        <br>
                        Another critical optimisation of the Goal-Oriented Action Planning algorithm is that it uses a
                        hash set to store the states of the environment that have already been visited. This allows
                        the algorithm to avoid visiting the same state multiple times and instead focus on the states
                        that have not been visited yet. This is useful as the algorithm will be able to generate a more
                        efficient action plan as it will not have to consider the same states multiple times.
                    </p>
                </div>
                <div class="col-sm-12 col-md-6">
                    <div class="d-flex flex-column">
                        <img src="/goapai/GOAPAISnippet0.png" alt="GOAP AI Snippet" class="w-100">
                        <img src="/goapai/actionPlan.png" alt="Action Plan" class="w-100" style="padding-top: 5px;">
                    </div>
                </div>
            </div>
        </div>
        <%- include('../partials/_bootstrapJS.ejs') %>
</body>

<%- include('../partials/_footer.ejs') %>